OUTLINE

start .                         | go to gui of location you are in terminal
git status                      | status of git
git add <docname>               | add docname to staging point
git add .                       | add all docs to staging point
git commit                      | commits all staging point docs to commit, write in file that pops up then save and quit
git commit -m "<message>"       | commits all staging point docs to commit, with the message
git commit -a -m "<msg>"        | git add . and commit with a message
git --amend                     | edit the the last commit or add new file to the last commit
git branch                      | shows what branch you are one
git branch <branch Name>        | no spaces makes a branch does not switch to branch
git switch <branch Name>        | switch to the the branch name you wish to be on
git switch -c <branch name>     | create branch and switch to that branch all in one go
git branch -D <branch name>     | force delete a branch. need to be on another branch
git branch -d <branch name>     | delete branch must merge branch first
git branch -m <new name>        | make branch new name. need to be on the branch
git merge <branch name>         | merge branch name to master branch. be on the master branch when you merge
git diff                        | show the difference between the last save unstaged
git diff HEAD                   | differnce between last commit staged and unstaged
git diff --staged               | differences between only staged files
git diff --cached               | differences between only staged files
git diff --staged <file name>   | differences between only staged file name
git diff <branch1> <branch2>    | differnec between branch1 and branch2
git diff <commit1> <commit2>    | difference between two commits
git diff HEAD HEAD~1            | differnce between head and the previous head ~<how many steps back>
git stash                       | save files without commiting when switcing to branch that has conflicts
git stash pop                   | saved file pops back after command is written on correct branch allowing for commit later on
git stash apply                 | saved file can be applyed back to where they belong but they still stay stashed and can be applied to more than one branch
git stash list                  | list of stashes
git checkout <commit-hash>      | check out other commits
git checkout head~<steps back>  | check out commits so many steps back from where the head is
git switch -                    | take me back to last branch
git checkout head <doc name>    | revert changes on the doc type back to the last head spot
git checkout -- <doc name>      | revert changes on the doc type back to the last head spot
git restore <doc name>          | revert changes on the doc type back to the last head spot
git restore --staged <doc name> | unstage a file that you have added 
git reset <commit-hash>         | reset repo back to the commit hash mentioned. keeps old info in working dir just deletes the commit with it in
git reset --hard <commit-hash>  | reset repo back to mentioned hash and also removes info from working dir
git revert <commit-hash>        | makes new commit with same info as the commit hash that you mention so you can return to a commit you left
git clone <url>                 | clone a repo from the url
git remote add <name> <url> 	| add remote add url to 
git remote -v		        | list if you have or what your current remotes are
git remote <oldName> <newName>  | change remote name
git remote remove <name>        | get rid of a remote
git push <remote> <branch>      | git push origin <branch name>
git push -u orgin <branchname>  | saves this branch to the branchname you make, so if you git push from that branch it will always push to that branch on github
git branch -r                   | to view the remote branches our local repo knows about
git fetch <remote> <branch>     | gets online repo and puts into git repo without messing with what you are currently doing. default is origin/main and all branches
git pull                        | gets online repo and puts it into your workspace
git rebase main                 | merges branches to the start of branches
git tag -l "*<tagFind>*"	| use to find all tags with the name tagFind
git tag <tagName>		| lightweight tag.  git tag will commit to the commit you are on
git tag <tagName> <commit>	| tag a commit from the past using the commit hash and add the tag name
git tag -f <tagName> <commit>	| force a tag name to move from one with the same name to the one with in the hash
git tag -d <tagname>		| delete the tag with that tagname
git push --tags			| push tags to github as they don't come by default